<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="1142" failures="0" time="42.86">
  <testsuite name="Test &lt;App /&gt; component behaviour at mount" errors="0" failures="0" skipped="0" timestamp="2020-04-25T19:37:59" time="25.266" tests="1142">
    <testcase classname="Test &lt;App /&gt; component behaviour at mount The state is correctly preset according to template with no modifications, when no functions change the state at mount" name="Test &lt;App /&gt; component behaviour at mount The state is correctly preset according to template with no modifications, when no functions change the state at mount" time="0.028">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(&quot;Test inserting a string&quot;, true): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(&quot;Test inserting a string&quot;, true): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.006">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(454, true): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(454, true): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([&quot;multidimensional array&quot;, &quot;gamma ray bursts&quot;, &quot;super novae&quot;, 45, false], true): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([&quot;multidimensional array&quot;, &quot;gamma ray bursts&quot;, &quot;super novae&quot;, 45, false], true): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(true, true): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(true, true): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.006">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(false, true): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(false, true): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(undefined, true): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(undefined, true): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(null, true): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(null, true): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([Function anonymous], true): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([Function anonymous], true): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(&quot;Test inserting a string&quot;, false): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(&quot;Test inserting a string&quot;, false): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(454, false): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(454, false): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([&quot;multidimensional array&quot;, &quot;gamma ray bursts&quot;, &quot;super novae&quot;, 45, false], false): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([&quot;multidimensional array&quot;, &quot;gamma ray bursts&quot;, &quot;super novae&quot;, 45, false], false): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(true, false): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(true, false): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(false, false): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(false, false): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(undefined, false): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(undefined, false): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(null, false): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(null, false): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([Function anonymous], false): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([Function anonymous], false): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(&quot;Test inserting a string&quot;, test inserting another string): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(&quot;Test inserting a string&quot;, test inserting another string): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(454, test inserting another string): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(454, test inserting another string): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([&quot;multidimensional array&quot;, &quot;gamma ray bursts&quot;, &quot;super novae&quot;, 45, false], test inserting another string): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([&quot;multidimensional array&quot;, &quot;gamma ray bursts&quot;, &quot;super novae&quot;, 45, false], test inserting another string): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(true, test inserting another string): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(true, test inserting another string): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(false, test inserting another string): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(false, test inserting another string): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(undefined, test inserting another string): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(undefined, test inserting another string): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.006">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(null, test inserting another string): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(null, test inserting another string): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([Function anonymous], test inserting another string): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([Function anonymous], test inserting another string): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(&quot;Test inserting a string&quot;, null): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(&quot;Test inserting a string&quot;, null): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(454, null): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(454, null): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.006">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([&quot;multidimensional array&quot;, &quot;gamma ray bursts&quot;, &quot;super novae&quot;, 45, false], null): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([&quot;multidimensional array&quot;, &quot;gamma ray bursts&quot;, &quot;super novae&quot;, 45, false], null): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(true, null): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(true, null): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(false, null): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(false, null): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(undefined, null): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(undefined, null): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(null, null): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(null, null): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.013">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([Function anonymous], null): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([Function anonymous], null): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(&quot;Test inserting a string&quot;, undefined): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(&quot;Test inserting a string&quot;, undefined): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(454, undefined): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(454, undefined): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([&quot;multidimensional array&quot;, &quot;gamma ray bursts&quot;, &quot;super novae&quot;, 45, false], undefined): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([&quot;multidimensional array&quot;, &quot;gamma ray bursts&quot;, &quot;super novae&quot;, 45, false], undefined): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(true, undefined): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(true, undefined): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(false, undefined): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(false, undefined): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(undefined, undefined): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(undefined, undefined): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.012">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(null, undefined): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(null, undefined): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([Function anonymous], undefined): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([Function anonymous], undefined): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(&quot;Test inserting a string&quot;, () =&gt; {}): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(&quot;Test inserting a string&quot;, () =&gt; {}): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(454, () =&gt; {}): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(454, () =&gt; {}): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.018">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([&quot;multidimensional array&quot;, &quot;gamma ray bursts&quot;, &quot;super novae&quot;, 45, false], () =&gt; {}): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([&quot;multidimensional array&quot;, &quot;gamma ray bursts&quot;, &quot;super novae&quot;, 45, false], () =&gt; {}): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(true, () =&gt; {}): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(true, () =&gt; {}): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(false, () =&gt; {}): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(false, () =&gt; {}): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(undefined, () =&gt; {}): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(undefined, () =&gt; {}): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(null, () =&gt; {}): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(null, () =&gt; {}): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([Function anonymous], () =&gt; {}): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([Function anonymous], () =&gt; {}): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(&quot;Test inserting a string&quot;, [object Object]): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(&quot;Test inserting a string&quot;, [object Object]): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(454, [object Object]): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(454, [object Object]): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([&quot;multidimensional array&quot;, &quot;gamma ray bursts&quot;, &quot;super novae&quot;, 45, false], [object Object]): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([&quot;multidimensional array&quot;, &quot;gamma ray bursts&quot;, &quot;super novae&quot;, 45, false], [object Object]): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.009">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(true, [object Object]): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(true, [object Object]): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.006">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(false, [object Object]): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(false, [object Object]): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(undefined, [object Object]): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(undefined, [object Object]): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(null, [object Object]): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(null, [object Object]): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([Function anonymous], [object Object]): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([Function anonymous], [object Object]): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(&quot;Test inserting a string&quot;, apple,pearch,orange,strawberry): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(&quot;Test inserting a string&quot;, apple,pearch,orange,strawberry): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(454, apple,pearch,orange,strawberry): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(454, apple,pearch,orange,strawberry): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.007">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([&quot;multidimensional array&quot;, &quot;gamma ray bursts&quot;, &quot;super novae&quot;, 45, false], apple,pearch,orange,strawberry): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([&quot;multidimensional array&quot;, &quot;gamma ray bursts&quot;, &quot;super novae&quot;, 45, false], apple,pearch,orange,strawberry): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(true, apple,pearch,orange,strawberry): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(true, apple,pearch,orange,strawberry): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(false, apple,pearch,orange,strawberry): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(false, apple,pearch,orange,strawberry): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(undefined, apple,pearch,orange,strawberry): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(undefined, apple,pearch,orange,strawberry): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(null, apple,pearch,orange,strawberry): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(null, apple,pearch,orange,strawberry): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([Function anonymous], apple,pearch,orange,strawberry): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([Function anonymous], apple,pearch,orange,strawberry): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(&quot;Test inserting a string&quot;, 77): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(&quot;Test inserting a string&quot;, 77): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(454, 77): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(454, 77): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([&quot;multidimensional array&quot;, &quot;gamma ray bursts&quot;, &quot;super novae&quot;, 45, false], 77): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([&quot;multidimensional array&quot;, &quot;gamma ray bursts&quot;, &quot;super novae&quot;, 45, false], 77): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.009">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(true, 77): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(true, 77): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(false, 77): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(false, 77): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(undefined, 77): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(undefined, 77): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(null, 77): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState(null, 77): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([Function anonymous], 77): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState([Function anonymous], 77): this.launchErrorOverlay() should be called once, because &quot;newProps&quot; is not an object. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey&quot;: 1, &quot;testkey2&quot;: &quot;text&quot;, &quot;testkey3&quot;: false}, true): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey&quot;: 1, &quot;testkey2&quot;: &quot;text&quot;, &quot;testkey3&quot;: false}, true): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey4&quot;: &quot;randomtext&quot;, &quot;testkey5&quot;: null, &quot;testkey6&quot;: true}, true): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey4&quot;: &quot;randomtext&quot;, &quot;testkey5&quot;: null, &quot;testkey6&quot;: true}, true): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey7&quot;: &quot;magnetar&quot;, &quot;testkey8&quot;: [Array], &quot;testkey9&quot;: false}, true): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey7&quot;: &quot;magnetar&quot;, &quot;testkey8&quot;: [Array], &quot;testkey9&quot;: false}, true): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey10&quot;: &quot;super novae&quot;, &quot;testkey8&quot;: false, &quot;testkey9&quot;: undefined}, true): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey10&quot;: &quot;super novae&quot;, &quot;testkey8&quot;: false, &quot;testkey9&quot;: undefined}, true): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey&quot;: 1, &quot;testkey2&quot;: &quot;text&quot;, &quot;testkey3&quot;: false}, false): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey&quot;: 1, &quot;testkey2&quot;: &quot;text&quot;, &quot;testkey3&quot;: false}, false): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.006">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey4&quot;: &quot;randomtext&quot;, &quot;testkey5&quot;: null, &quot;testkey6&quot;: true}, false): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey4&quot;: &quot;randomtext&quot;, &quot;testkey5&quot;: null, &quot;testkey6&quot;: true}, false): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey7&quot;: &quot;magnetar&quot;, &quot;testkey8&quot;: [Array], &quot;testkey9&quot;: false}, false): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey7&quot;: &quot;magnetar&quot;, &quot;testkey8&quot;: [Array], &quot;testkey9&quot;: false}, false): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey10&quot;: &quot;super novae&quot;, &quot;testkey8&quot;: false, &quot;testkey9&quot;: undefined}, false): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey10&quot;: &quot;super novae&quot;, &quot;testkey8&quot;: false, &quot;testkey9&quot;: undefined}, false): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey&quot;: 1, &quot;testkey2&quot;: &quot;text&quot;, &quot;testkey3&quot;: false}, test inserting another string): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey&quot;: 1, &quot;testkey2&quot;: &quot;text&quot;, &quot;testkey3&quot;: false}, test inserting another string): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey4&quot;: &quot;randomtext&quot;, &quot;testkey5&quot;: null, &quot;testkey6&quot;: true}, test inserting another string): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey4&quot;: &quot;randomtext&quot;, &quot;testkey5&quot;: null, &quot;testkey6&quot;: true}, test inserting another string): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey7&quot;: &quot;magnetar&quot;, &quot;testkey8&quot;: [Array], &quot;testkey9&quot;: false}, test inserting another string): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey7&quot;: &quot;magnetar&quot;, &quot;testkey8&quot;: [Array], &quot;testkey9&quot;: false}, test inserting another string): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey10&quot;: &quot;super novae&quot;, &quot;testkey8&quot;: false, &quot;testkey9&quot;: undefined}, test inserting another string): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey10&quot;: &quot;super novae&quot;, &quot;testkey8&quot;: false, &quot;testkey9&quot;: undefined}, test inserting another string): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey&quot;: 1, &quot;testkey2&quot;: &quot;text&quot;, &quot;testkey3&quot;: false}, null): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey&quot;: 1, &quot;testkey2&quot;: &quot;text&quot;, &quot;testkey3&quot;: false}, null): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey4&quot;: &quot;randomtext&quot;, &quot;testkey5&quot;: null, &quot;testkey6&quot;: true}, null): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey4&quot;: &quot;randomtext&quot;, &quot;testkey5&quot;: null, &quot;testkey6&quot;: true}, null): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey7&quot;: &quot;magnetar&quot;, &quot;testkey8&quot;: [Array], &quot;testkey9&quot;: false}, null): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey7&quot;: &quot;magnetar&quot;, &quot;testkey8&quot;: [Array], &quot;testkey9&quot;: false}, null): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey10&quot;: &quot;super novae&quot;, &quot;testkey8&quot;: false, &quot;testkey9&quot;: undefined}, null): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey10&quot;: &quot;super novae&quot;, &quot;testkey8&quot;: false, &quot;testkey9&quot;: undefined}, null): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey&quot;: 1, &quot;testkey2&quot;: &quot;text&quot;, &quot;testkey3&quot;: false}, undefined): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey&quot;: 1, &quot;testkey2&quot;: &quot;text&quot;, &quot;testkey3&quot;: false}, undefined): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey4&quot;: &quot;randomtext&quot;, &quot;testkey5&quot;: null, &quot;testkey6&quot;: true}, undefined): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey4&quot;: &quot;randomtext&quot;, &quot;testkey5&quot;: null, &quot;testkey6&quot;: true}, undefined): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey7&quot;: &quot;magnetar&quot;, &quot;testkey8&quot;: [Array], &quot;testkey9&quot;: false}, undefined): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey7&quot;: &quot;magnetar&quot;, &quot;testkey8&quot;: [Array], &quot;testkey9&quot;: false}, undefined): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey10&quot;: &quot;super novae&quot;, &quot;testkey8&quot;: false, &quot;testkey9&quot;: undefined}, undefined): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey10&quot;: &quot;super novae&quot;, &quot;testkey8&quot;: false, &quot;testkey9&quot;: undefined}, undefined): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey&quot;: 1, &quot;testkey2&quot;: &quot;text&quot;, &quot;testkey3&quot;: false}, () =&gt; {}): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey&quot;: 1, &quot;testkey2&quot;: &quot;text&quot;, &quot;testkey3&quot;: false}, () =&gt; {}): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey4&quot;: &quot;randomtext&quot;, &quot;testkey5&quot;: null, &quot;testkey6&quot;: true}, () =&gt; {}): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey4&quot;: &quot;randomtext&quot;, &quot;testkey5&quot;: null, &quot;testkey6&quot;: true}, () =&gt; {}): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey7&quot;: &quot;magnetar&quot;, &quot;testkey8&quot;: [Array], &quot;testkey9&quot;: false}, () =&gt; {}): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey7&quot;: &quot;magnetar&quot;, &quot;testkey8&quot;: [Array], &quot;testkey9&quot;: false}, () =&gt; {}): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey10&quot;: &quot;super novae&quot;, &quot;testkey8&quot;: false, &quot;testkey9&quot;: undefined}, () =&gt; {}): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey10&quot;: &quot;super novae&quot;, &quot;testkey8&quot;: false, &quot;testkey9&quot;: undefined}, () =&gt; {}): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey&quot;: 1, &quot;testkey2&quot;: &quot;text&quot;, &quot;testkey3&quot;: false}, [object Object]): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey&quot;: 1, &quot;testkey2&quot;: &quot;text&quot;, &quot;testkey3&quot;: false}, [object Object]): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.006">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey4&quot;: &quot;randomtext&quot;, &quot;testkey5&quot;: null, &quot;testkey6&quot;: true}, [object Object]): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey4&quot;: &quot;randomtext&quot;, &quot;testkey5&quot;: null, &quot;testkey6&quot;: true}, [object Object]): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey7&quot;: &quot;magnetar&quot;, &quot;testkey8&quot;: [Array], &quot;testkey9&quot;: false}, [object Object]): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey7&quot;: &quot;magnetar&quot;, &quot;testkey8&quot;: [Array], &quot;testkey9&quot;: false}, [object Object]): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey10&quot;: &quot;super novae&quot;, &quot;testkey8&quot;: false, &quot;testkey9&quot;: undefined}, [object Object]): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey10&quot;: &quot;super novae&quot;, &quot;testkey8&quot;: false, &quot;testkey9&quot;: undefined}, [object Object]): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey&quot;: 1, &quot;testkey2&quot;: &quot;text&quot;, &quot;testkey3&quot;: false}, apple,pearch,orange,strawberry): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey&quot;: 1, &quot;testkey2&quot;: &quot;text&quot;, &quot;testkey3&quot;: false}, apple,pearch,orange,strawberry): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey4&quot;: &quot;randomtext&quot;, &quot;testkey5&quot;: null, &quot;testkey6&quot;: true}, apple,pearch,orange,strawberry): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey4&quot;: &quot;randomtext&quot;, &quot;testkey5&quot;: null, &quot;testkey6&quot;: true}, apple,pearch,orange,strawberry): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey7&quot;: &quot;magnetar&quot;, &quot;testkey8&quot;: [Array], &quot;testkey9&quot;: false}, apple,pearch,orange,strawberry): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey7&quot;: &quot;magnetar&quot;, &quot;testkey8&quot;: [Array], &quot;testkey9&quot;: false}, apple,pearch,orange,strawberry): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey10&quot;: &quot;super novae&quot;, &quot;testkey8&quot;: false, &quot;testkey9&quot;: undefined}, apple,pearch,orange,strawberry): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey10&quot;: &quot;super novae&quot;, &quot;testkey8&quot;: false, &quot;testkey9&quot;: undefined}, apple,pearch,orange,strawberry): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey&quot;: 1, &quot;testkey2&quot;: &quot;text&quot;, &quot;testkey3&quot;: false}, 77): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey&quot;: 1, &quot;testkey2&quot;: &quot;text&quot;, &quot;testkey3&quot;: false}, 77): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey4&quot;: &quot;randomtext&quot;, &quot;testkey5&quot;: null, &quot;testkey6&quot;: true}, 77): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey4&quot;: &quot;randomtext&quot;, &quot;testkey5&quot;: null, &quot;testkey6&quot;: true}, 77): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey7&quot;: &quot;magnetar&quot;, &quot;testkey8&quot;: [Array], &quot;testkey9&quot;: false}, 77): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey7&quot;: &quot;magnetar&quot;, &quot;testkey8&quot;: [Array], &quot;testkey9&quot;: false}, 77): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey10&quot;: &quot;super novae&quot;, &quot;testkey8&quot;: false, &quot;testkey9&quot;: undefined}, 77): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({&quot;testkey10&quot;: &quot;super novae&quot;, &quot;testkey8&quot;: false, &quot;testkey9&quot;: undefined}, 77): this.setState(%p) should be called, because &quot;newProps&quot; is an object and there is no callback specified. &quot;showLoadbar&quot; does not change the expected result." time="0.006">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({}, false): this.setState(testParam_newProps) should be called because &quot;newProps&quot; is an object, and &quot;callback&quot; parameter being undefined." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({}, false): this.setState(testParam_newProps) should be called because &quot;newProps&quot; is an object, and &quot;callback&quot; parameter being undefined." time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({ key1: 1, key2: &quot;hello&quot;, key3: false }, false): this.setState(testParam_newProps) should be called because &quot;newProps&quot; is an object, and &quot;callback&quot; parameter being undefined." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({ key1: 1, key2: &quot;hello&quot;, key3: false }, false): this.setState(testParam_newProps) should be called because &quot;newProps&quot; is an object, and &quot;callback&quot; parameter being undefined." time="0.001">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({}, false, () =&gt; {}): this.setState(testParam_newProps, testParam_callback) should be called because &quot;newProps&quot; is an object, and &quot;callback&quot; is a function." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({}, false, () =&gt; {}): this.setState(testParam_newProps, testParam_callback) should be called because &quot;newProps&quot; is an object, and &quot;callback&quot; is a function." time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({ key1: 1, key2: &quot;hello&quot;, key3: false }, false, () =&gt; {}): this.setState(testParam_newProps, testParam_callback) should be called because &quot;newProps&quot; is an object, and &quot;callback&quot; is a function." name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({ key1: 1, key2: &quot;hello&quot;, key3: false }, false, () =&gt; {}): this.setState(testParam_newProps, testParam_callback) should be called because &quot;newProps&quot; is an object, and &quot;callback&quot; is a function." time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({}, false, &quot;test&quot;): this.launchErrorOverlay() should be called because &quot;newProps&quot; is an object, but &quot;callback&quot; is neither a function nor undefined" name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({}, false, &quot;test&quot;): this.launchErrorOverlay() should be called because &quot;newProps&quot; is an object, but &quot;callback&quot; is neither a function nor undefined" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({}, false, 380): this.launchErrorOverlay() should be called because &quot;newProps&quot; is an object, but &quot;callback&quot; is neither a function nor undefined" name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({}, false, 380): this.launchErrorOverlay() should be called because &quot;newProps&quot; is an object, but &quot;callback&quot; is neither a function nor undefined" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({}, false, true): this.launchErrorOverlay() should be called because &quot;newProps&quot; is an object, but &quot;callback&quot; is neither a function nor undefined" name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({}, false, true): this.launchErrorOverlay() should be called because &quot;newProps&quot; is an object, but &quot;callback&quot; is neither a function nor undefined" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({}, false, null): this.launchErrorOverlay() should be called because &quot;newProps&quot; is an object, but &quot;callback&quot; is neither a function nor undefined" name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({}, false, null): this.launchErrorOverlay() should be called because &quot;newProps&quot; is an object, but &quot;callback&quot; is neither a function nor undefined" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({}, false, { testobjectname: &quot;Just passing by&quot;, age: 20 }): this.launchErrorOverlay() should be called because &quot;newProps&quot; is an object, but &quot;callback&quot; is neither a function nor undefined" name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({}, false, { testobjectname: &quot;Just passing by&quot;, age: 20 }): this.launchErrorOverlay() should be called because &quot;newProps&quot; is an object, but &quot;callback&quot; is neither a function nor undefined" time="0.001">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({}, false, [&quot;testarray&quot;, 14]): this.launchErrorOverlay() should be called because &quot;newProps&quot; is an object, but &quot;callback&quot; is neither a function nor undefined" name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Run updateState({}, false, [&quot;testarray&quot;, 14]): this.launchErrorOverlay() should be called because &quot;newProps&quot; is an object, but &quot;callback&quot; is neither a function nor undefined" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Check that the error ExceptionsHandler.ValidatorError(&quot;app-101&quot;) is thrown, when &quot;newProps&quot; is an object containing anything (excluding array) AND &quot;callback&quot; is neither a function nor undefined Run updateState({}, false, &quot;test string&quot;): ExceptionsHandler.ValidatorError(&quot;app-101&quot;) should be called because &quot;callback&quot; is neither a function nor undefined, while &quot;newProps&quot; being an object" name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Check that the error ExceptionsHandler.ValidatorError(&quot;app-101&quot;) is thrown, when &quot;newProps&quot; is an object containing anything (excluding array) AND &quot;callback&quot; is neither a function nor undefined Run updateState({}, false, &quot;test string&quot;): ExceptionsHandler.ValidatorError(&quot;app-101&quot;) should be called because &quot;callback&quot; is neither a function nor undefined, while &quot;newProps&quot; being an object" time="0.001">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Check that the error ExceptionsHandler.ValidatorError(&quot;app-101&quot;) is thrown, when &quot;newProps&quot; is an object containing anything (excluding array) AND &quot;callback&quot; is neither a function nor undefined Run updateState({}, false, 22): ExceptionsHandler.ValidatorError(&quot;app-101&quot;) should be called because &quot;callback&quot; is neither a function nor undefined, while &quot;newProps&quot; being an object" name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Check that the error ExceptionsHandler.ValidatorError(&quot;app-101&quot;) is thrown, when &quot;newProps&quot; is an object containing anything (excluding array) AND &quot;callback&quot; is neither a function nor undefined Run updateState({}, false, 22): ExceptionsHandler.ValidatorError(&quot;app-101&quot;) should be called because &quot;callback&quot; is neither a function nor undefined, while &quot;newProps&quot; being an object" time="0.001">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Check that the error ExceptionsHandler.ValidatorError(&quot;app-101&quot;) is thrown, when &quot;newProps&quot; is an object containing anything (excluding array) AND &quot;callback&quot; is neither a function nor undefined Run updateState({}, false, null): ExceptionsHandler.ValidatorError(&quot;app-101&quot;) should be called because &quot;callback&quot; is neither a function nor undefined, while &quot;newProps&quot; being an object" name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Check that the error ExceptionsHandler.ValidatorError(&quot;app-101&quot;) is thrown, when &quot;newProps&quot; is an object containing anything (excluding array) AND &quot;callback&quot; is neither a function nor undefined Run updateState({}, false, null): ExceptionsHandler.ValidatorError(&quot;app-101&quot;) should be called because &quot;callback&quot; is neither a function nor undefined, while &quot;newProps&quot; being an object" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Check that the error ExceptionsHandler.ValidatorError(&quot;app-101&quot;) is thrown, when &quot;newProps&quot; is an object containing anything (excluding array) AND &quot;callback&quot; is neither a function nor undefined Run updateState({}, false, [true, false, 12]): ExceptionsHandler.ValidatorError(&quot;app-101&quot;) should be called because &quot;callback&quot; is neither a function nor undefined, while &quot;newProps&quot; being an object" name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Check that the error ExceptionsHandler.ValidatorError(&quot;app-101&quot;) is thrown, when &quot;newProps&quot; is an object containing anything (excluding array) AND &quot;callback&quot; is neither a function nor undefined Run updateState({}, false, [true, false, 12]): ExceptionsHandler.ValidatorError(&quot;app-101&quot;) should be called because &quot;callback&quot; is neither a function nor undefined, while &quot;newProps&quot; being an object" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Check that the error ExceptionsHandler.ValidatorError(&quot;app-101&quot;) is thrown, when &quot;newProps&quot; is an object containing anything (excluding array) AND &quot;callback&quot; is neither a function nor undefined Run updateState({}, false, { testkey: &quot;test string input&quot; }): ExceptionsHandler.ValidatorError(&quot;app-101&quot;) should be called because &quot;callback&quot; is neither a function nor undefined, while &quot;newProps&quot; being an object" name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Check that the error ExceptionsHandler.ValidatorError(&quot;app-101&quot;) is thrown, when &quot;newProps&quot; is an object containing anything (excluding array) AND &quot;callback&quot; is neither a function nor undefined Run updateState({}, false, { testkey: &quot;test string input&quot; }): ExceptionsHandler.ValidatorError(&quot;app-101&quot;) should be called because &quot;callback&quot; is neither a function nor undefined, while &quot;newProps&quot; being an object" time="0.007">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Check that the error ExceptionsHandler.ValidatorError(&quot;app-101&quot;) is thrown, when &quot;newProps&quot; is an object containing anything (excluding array) AND &quot;callback&quot; is neither a function nor undefined Run updateState({}, false, true): ExceptionsHandler.ValidatorError(&quot;app-101&quot;) should be called because &quot;callback&quot; is neither a function nor undefined, while &quot;newProps&quot; being an object" name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Check that the error ExceptionsHandler.ValidatorError(&quot;app-101&quot;) is thrown, when &quot;newProps&quot; is an object containing anything (excluding array) AND &quot;callback&quot; is neither a function nor undefined Run updateState({}, false, true): ExceptionsHandler.ValidatorError(&quot;app-101&quot;) should be called because &quot;callback&quot; is neither a function nor undefined, while &quot;newProps&quot; being an object" time="0.008">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Check that the error ExceptionsHandler.ValidatorError(&quot;app-102&quot;) is thrown, when &quot;newProps&quot; is not an object, regardless of the &quot;callback&quot; parameter Run updateState(12, false): ExceptionsHandler.ValidatorError(&quot;app-102&quot;) should be called because &quot;newProps&quot; is not an object" name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Check that the error ExceptionsHandler.ValidatorError(&quot;app-102&quot;) is thrown, when &quot;newProps&quot; is not an object, regardless of the &quot;callback&quot; parameter Run updateState(12, false): ExceptionsHandler.ValidatorError(&quot;app-102&quot;) should be called because &quot;newProps&quot; is not an object" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Check that the error ExceptionsHandler.ValidatorError(&quot;app-102&quot;) is thrown, when &quot;newProps&quot; is not an object, regardless of the &quot;callback&quot; parameter Run updateState(&quot;test string&quot;, false, () =&gt; {}): ExceptionsHandler.ValidatorError(&quot;app-102&quot;) should be called because &quot;newProps&quot; is not an object" name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Check that the error ExceptionsHandler.ValidatorError(&quot;app-102&quot;) is thrown, when &quot;newProps&quot; is not an object, regardless of the &quot;callback&quot; parameter Run updateState(&quot;test string&quot;, false, () =&gt; {}): ExceptionsHandler.ValidatorError(&quot;app-102&quot;) should be called because &quot;newProps&quot; is not an object" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Check that the error ExceptionsHandler.ValidatorError(&quot;app-102&quot;) is thrown, when &quot;newProps&quot; is not an object, regardless of the &quot;callback&quot; parameter Run updateState(true, false, &quot;test string input&quot;): ExceptionsHandler.ValidatorError(&quot;app-102&quot;) should be called because &quot;newProps&quot; is not an object" name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Check that the error ExceptionsHandler.ValidatorError(&quot;app-102&quot;) is thrown, when &quot;newProps&quot; is not an object, regardless of the &quot;callback&quot; parameter Run updateState(true, false, &quot;test string input&quot;): ExceptionsHandler.ValidatorError(&quot;app-102&quot;) should be called because &quot;newProps&quot; is not an object" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Check that the error ExceptionsHandler.ValidatorError(&quot;app-102&quot;) is thrown, when &quot;newProps&quot; is not an object, regardless of the &quot;callback&quot; parameter Run updateState(null, false, 30): ExceptionsHandler.ValidatorError(&quot;app-102&quot;) should be called because &quot;newProps&quot; is not an object" name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Check that the error ExceptionsHandler.ValidatorError(&quot;app-102&quot;) is thrown, when &quot;newProps&quot; is not an object, regardless of the &quot;callback&quot; parameter Run updateState(null, false, 30): ExceptionsHandler.ValidatorError(&quot;app-102&quot;) should be called because &quot;newProps&quot; is not an object" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Check that the error ExceptionsHandler.ValidatorError(&quot;app-102&quot;) is thrown, when &quot;newProps&quot; is not an object, regardless of the &quot;callback&quot; parameter Run updateState(undefined, false, true): ExceptionsHandler.ValidatorError(&quot;app-102&quot;) should be called because &quot;newProps&quot; is not an object" name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Check that the error ExceptionsHandler.ValidatorError(&quot;app-102&quot;) is thrown, when &quot;newProps&quot; is not an object, regardless of the &quot;callback&quot; parameter Run updateState(undefined, false, true): ExceptionsHandler.ValidatorError(&quot;app-102&quot;) should be called because &quot;newProps&quot; is not an object" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Check that the error ExceptionsHandler.ValidatorError(&quot;app-102&quot;) is thrown, when &quot;newProps&quot; is not an object, regardless of the &quot;callback&quot; parameter Run updateState([12, 20], false, true): ExceptionsHandler.ValidatorError(&quot;app-102&quot;) should be called because &quot;newProps&quot; is not an object" name="&lt;App /&gt;: Unit test of individual methods located in this component updateState(newProps, showLoadbar, callback): Test this method with various typeof inputs as &quot;newProps&quot;. Only call this.setState() if the &quot;newProps&quot; parameter is an object (excluding arrays), AND if the &quot;callback&quot; parameter is a function or undefined. The &quot;showLoadbar&quot; parameter does not affect what function gets called Check that the error ExceptionsHandler.ValidatorError(&quot;app-102&quot;) is thrown, when &quot;newProps&quot; is not an object, regardless of the &quot;callback&quot; parameter Run updateState([12, 20], false, true): ExceptionsHandler.ValidatorError(&quot;app-102&quot;) should be called because &quot;newProps&quot; is not an object" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Check that the error ExceptionsHandler.ValidatorError(&quot;app-104&quot;) is thrown, if &quot;viewProps&quot; is not an object Run handleNavigation(&quot;test string&quot;): ExceptionsHandler.ValidatorError(&quot;app-104&quot;) should be called, because &quot;viewProps&quot; is not an object" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Check that the error ExceptionsHandler.ValidatorError(&quot;app-104&quot;) is thrown, if &quot;viewProps&quot; is not an object Run handleNavigation(&quot;test string&quot;): ExceptionsHandler.ValidatorError(&quot;app-104&quot;) should be called, because &quot;viewProps&quot; is not an object" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Check that the error ExceptionsHandler.ValidatorError(&quot;app-104&quot;) is thrown, if &quot;viewProps&quot; is not an object Run handleNavigation(30): ExceptionsHandler.ValidatorError(&quot;app-104&quot;) should be called, because &quot;viewProps&quot; is not an object" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Check that the error ExceptionsHandler.ValidatorError(&quot;app-104&quot;) is thrown, if &quot;viewProps&quot; is not an object Run handleNavigation(30): ExceptionsHandler.ValidatorError(&quot;app-104&quot;) should be called, because &quot;viewProps&quot; is not an object" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Check that the error ExceptionsHandler.ValidatorError(&quot;app-104&quot;) is thrown, if &quot;viewProps&quot; is not an object Run handleNavigation(true): ExceptionsHandler.ValidatorError(&quot;app-104&quot;) should be called, because &quot;viewProps&quot; is not an object" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Check that the error ExceptionsHandler.ValidatorError(&quot;app-104&quot;) is thrown, if &quot;viewProps&quot; is not an object Run handleNavigation(true): ExceptionsHandler.ValidatorError(&quot;app-104&quot;) should be called, because &quot;viewProps&quot; is not an object" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Check that the error ExceptionsHandler.ValidatorError(&quot;app-104&quot;) is thrown, if &quot;viewProps&quot; is not an object Run handleNavigation(false): ExceptionsHandler.ValidatorError(&quot;app-104&quot;) should be called, because &quot;viewProps&quot; is not an object" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Check that the error ExceptionsHandler.ValidatorError(&quot;app-104&quot;) is thrown, if &quot;viewProps&quot; is not an object Run handleNavigation(false): ExceptionsHandler.ValidatorError(&quot;app-104&quot;) should be called, because &quot;viewProps&quot; is not an object" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Check that the error ExceptionsHandler.ValidatorError(&quot;app-104&quot;) is thrown, if &quot;viewProps&quot; is not an object Run handleNavigation([&quot;donald duck&quot;, &quot;mickey mouse&quot;, 5, false]): ExceptionsHandler.ValidatorError(&quot;app-104&quot;) should be called, because &quot;viewProps&quot; is not an object" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Check that the error ExceptionsHandler.ValidatorError(&quot;app-104&quot;) is thrown, if &quot;viewProps&quot; is not an object Run handleNavigation([&quot;donald duck&quot;, &quot;mickey mouse&quot;, 5, false]): ExceptionsHandler.ValidatorError(&quot;app-104&quot;) should be called, because &quot;viewProps&quot; is not an object" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Check that the error ExceptionsHandler.ValidatorError(&quot;app-104&quot;) is thrown, if &quot;viewProps&quot; is not an object Run handleNavigation(null): ExceptionsHandler.ValidatorError(&quot;app-104&quot;) should be called, because &quot;viewProps&quot; is not an object" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Check that the error ExceptionsHandler.ValidatorError(&quot;app-104&quot;) is thrown, if &quot;viewProps&quot; is not an object Run handleNavigation(null): ExceptionsHandler.ValidatorError(&quot;app-104&quot;) should be called, because &quot;viewProps&quot; is not an object" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Check that the error ExceptionsHandler.ValidatorError(&quot;app-104&quot;) is thrown, if &quot;viewProps&quot; is not an object Run handleNavigation(undefined): ExceptionsHandler.ValidatorError(&quot;app-104&quot;) should be called, because &quot;viewProps&quot; is not an object" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Check that the error ExceptionsHandler.ValidatorError(&quot;app-104&quot;) is thrown, if &quot;viewProps&quot; is not an object Run handleNavigation(undefined): ExceptionsHandler.ValidatorError(&quot;app-104&quot;) should be called, because &quot;viewProps&quot; is not an object" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Check that the error ExceptionsHandler.ValidatorError(&quot;app-104&quot;) is thrown, if &quot;viewProps&quot; is not an object Run handleNavigation(): ExceptionsHandler.ValidatorError(&quot;app-104&quot;) should be called, because &quot;viewProps&quot; is not an object" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Check that the error ExceptionsHandler.ValidatorError(&quot;app-104&quot;) is thrown, if &quot;viewProps&quot; is not an object Run handleNavigation(): ExceptionsHandler.ValidatorError(&quot;app-104&quot;) should be called, because &quot;viewProps&quot; is not an object" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ viewData: &quot;test string for view data&quot; }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ viewData: &quot;test string for view data&quot; }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ viewData: 30 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ viewData: 30 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ viewData: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ viewData: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ viewData: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ viewData: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.001">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.001">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ viewData: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ viewData: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.001">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ viewData: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ viewData: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;} }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;} }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;} }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;} }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.001">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ metaData: &quot;test string for meta data&quot; }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ metaData: &quot;test string for meta data&quot; }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.001">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ metaData: 45 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ metaData: 45 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ metaData: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ metaData: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ metaData: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ metaData: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ metaData: [&quot;daisy duck&quot;, &quot;goofy&quot;, 52, true] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ metaData: [&quot;daisy duck&quot;, &quot;goofy&quot;, 52, true] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ metaData: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ metaData: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ metaData: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ metaData: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ metaData: {&quot;testObj2&quot;: &quot;contents of test object 2&quot;} }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ metaData: {&quot;testObj2&quot;: &quot;contents of test object 2&quot;} }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.001">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ metaData: {&quot;anotherTestObj2&quot;: false, &quot;anotherTestObj3&quot;: null, &quot;testObj21&quot;: &quot;contents of test object 2&quot;} }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ metaData: {&quot;anotherTestObj2&quot;: false, &quot;anotherTestObj3&quot;: null, &quot;testObj21&quot;: &quot;contents of test object 2&quot;} }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ refreshFactor: &quot;test string for refreshFactor&quot; }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ refreshFactor: &quot;test string for refreshFactor&quot; }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.001">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ refreshFactor: [&quot;darkwing duck&quot;, &quot;simba&quot;, false, 247] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ refreshFactor: [&quot;darkwing duck&quot;, &quot;simba&quot;, false, 247] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.001">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.001">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ refreshFactor: {&quot;testObj3&quot;: &quot;contents of test object 3&quot;} }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ refreshFactor: {&quot;testObj3&quot;: &quot;contents of test object 3&quot;} }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ refreshFactor: {&quot;anotherTestObj4&quot;: &quot;test string&quot;, &quot;anotherTestObj5&quot;: [Function anotherTestObj5], &quot;imagination1&quot;: 0, &quot;testObj32&quot;: &quot;contents of test object 3&quot;} }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Run handleNavigation({ refreshFactor: {&quot;anotherTestObj4&quot;: &quot;test string&quot;, &quot;anotherTestObj5&quot;: [Function anotherTestObj5], &quot;imagination1&quot;: 0, &quot;testObj32&quot;: &quot;contents of test object 3&quot;} }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, metaData: test string for meta data }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, metaData: test string for meta data }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.006">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, metaData: test string for meta data }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, metaData: test string for meta data }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, metaData: test string for meta data }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, metaData: test string for meta data }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, metaData: test string for meta data }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, metaData: test string for meta data }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], metaData: test string for meta data }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], metaData: test string for meta data }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, metaData: test string for meta data }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, metaData: test string for meta data }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, metaData: test string for meta data }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, metaData: test string for meta data }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, metaData: test string for meta data }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, metaData: test string for meta data }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, metaData: test string for meta data }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, metaData: test string for meta data }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, metaData: 45 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, metaData: 45 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, metaData: 45 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, metaData: 45 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, metaData: 45 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, metaData: 45 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, metaData: 45 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, metaData: 45 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], metaData: 45 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], metaData: 45 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, metaData: 45 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, metaData: 45 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, metaData: 45 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, metaData: 45 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.013">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, metaData: 45 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, metaData: 45 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, metaData: 45 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, metaData: 45 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, metaData: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, metaData: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, metaData: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, metaData: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, metaData: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, metaData: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, metaData: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, metaData: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], metaData: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], metaData: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, metaData: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, metaData: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, metaData: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, metaData: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, metaData: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, metaData: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, metaData: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, metaData: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, metaData: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, metaData: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, metaData: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, metaData: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, metaData: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, metaData: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, metaData: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, metaData: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], metaData: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], metaData: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.006">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, metaData: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, metaData: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, metaData: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, metaData: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, metaData: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, metaData: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.009">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, metaData: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, metaData: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.016">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, metaData: daisy duck,goofy,52,true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, metaData: daisy duck,goofy,52,true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, metaData: daisy duck,goofy,52,true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, metaData: daisy duck,goofy,52,true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, metaData: daisy duck,goofy,52,true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, metaData: daisy duck,goofy,52,true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, metaData: daisy duck,goofy,52,true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, metaData: daisy duck,goofy,52,true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], metaData: daisy duck,goofy,52,true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], metaData: daisy duck,goofy,52,true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, metaData: daisy duck,goofy,52,true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, metaData: daisy duck,goofy,52,true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, metaData: daisy duck,goofy,52,true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, metaData: daisy duck,goofy,52,true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, metaData: daisy duck,goofy,52,true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, metaData: daisy duck,goofy,52,true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.006">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, metaData: daisy duck,goofy,52,true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, metaData: daisy duck,goofy,52,true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, metaData: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, metaData: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, metaData: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, metaData: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, metaData: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, metaData: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, metaData: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, metaData: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], metaData: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], metaData: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.006">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, metaData: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, metaData: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.012">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, metaData: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, metaData: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, metaData: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, metaData: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, metaData: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, metaData: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, metaData: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, metaData: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, metaData: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, metaData: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, metaData: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, metaData: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, metaData: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, metaData: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.006">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], metaData: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], metaData: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, metaData: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, metaData: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, metaData: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, metaData: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, metaData: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, metaData: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, metaData: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, metaData: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;metaData&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, metaData: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.007">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.007">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.011">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.007">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.007">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.006">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.007">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.011">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.02">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.011">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.007">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.006">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.006">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.006">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: &quot;test string for view data&quot;, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: [&quot;tiger&quot;, &quot;winnie&quot;, 5, false], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;testObj1&quot;: &quot;contents of test object 1&quot;}, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ viewData: {&quot;anotherTestObj&quot;: 41, &quot;testObj4&quot;: &quot;contents of test object 1&quot;}, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: &quot;test string for meta data&quot;, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: &quot;test string for meta data&quot;, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: 45, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: 45, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: true, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: true, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: [&quot;daisy duck&quot;, &quot;goofy&quot;, 52, true], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: [&quot;daisy duck&quot;, &quot;goofy&quot;, 52, true], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: null, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: null, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: undefined, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: undefined, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.006">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;testObj2&quot;: &quot;contents of test object 2&quot;}, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;testObj2&quot;: &quot;contents of test object 2&quot;}, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;anotherTestObj2&quot;: false, &quot;anotherTestObj3&quot;: null, &quot;testObj21&quot;: &quot;contents of test object 2&quot;}, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;anotherTestObj2&quot;: false, &quot;anotherTestObj3&quot;: null, &quot;testObj21&quot;: &quot;contents of test object 2&quot;}, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: &quot;test string for meta data&quot;, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: &quot;test string for meta data&quot;, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.009">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: 45, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: 45, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: true, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: true, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: [&quot;daisy duck&quot;, &quot;goofy&quot;, 52, true], refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: [&quot;daisy duck&quot;, &quot;goofy&quot;, 52, true], refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: null, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: null, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: undefined, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: undefined, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;testObj2&quot;: &quot;contents of test object 2&quot;}, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;testObj2&quot;: &quot;contents of test object 2&quot;}, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;anotherTestObj2&quot;: false, &quot;anotherTestObj3&quot;: null, &quot;testObj21&quot;: &quot;contents of test object 2&quot;}, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;anotherTestObj2&quot;: false, &quot;anotherTestObj3&quot;: null, &quot;testObj21&quot;: &quot;contents of test object 2&quot;}, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: &quot;test string for meta data&quot;, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: &quot;test string for meta data&quot;, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: 45, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: 45, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: true, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: true, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: [&quot;daisy duck&quot;, &quot;goofy&quot;, 52, true], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: [&quot;daisy duck&quot;, &quot;goofy&quot;, 52, true], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: null, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: null, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: undefined, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: undefined, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;testObj2&quot;: &quot;contents of test object 2&quot;}, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;testObj2&quot;: &quot;contents of test object 2&quot;}, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;anotherTestObj2&quot;: false, &quot;anotherTestObj3&quot;: null, &quot;testObj21&quot;: &quot;contents of test object 2&quot;}, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;anotherTestObj2&quot;: false, &quot;anotherTestObj3&quot;: null, &quot;testObj21&quot;: &quot;contents of test object 2&quot;}, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: &quot;test string for meta data&quot;, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: &quot;test string for meta data&quot;, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: 45, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: 45, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: true, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: true, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: [&quot;daisy duck&quot;, &quot;goofy&quot;, 52, true], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: [&quot;daisy duck&quot;, &quot;goofy&quot;, 52, true], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: null, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: null, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: undefined, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: undefined, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;testObj2&quot;: &quot;contents of test object 2&quot;}, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;testObj2&quot;: &quot;contents of test object 2&quot;}, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;anotherTestObj2&quot;: false, &quot;anotherTestObj3&quot;: null, &quot;testObj21&quot;: &quot;contents of test object 2&quot;}, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;anotherTestObj2&quot;: false, &quot;anotherTestObj3&quot;: null, &quot;testObj21&quot;: &quot;contents of test object 2&quot;}, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: &quot;test string for meta data&quot;, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: &quot;test string for meta data&quot;, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: 45, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: 45, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: true, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: true, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: [&quot;daisy duck&quot;, &quot;goofy&quot;, 52, true], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: [&quot;daisy duck&quot;, &quot;goofy&quot;, 52, true], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: null, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: null, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: undefined, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: undefined, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;testObj2&quot;: &quot;contents of test object 2&quot;}, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;testObj2&quot;: &quot;contents of test object 2&quot;}, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;anotherTestObj2&quot;: false, &quot;anotherTestObj3&quot;: null, &quot;testObj21&quot;: &quot;contents of test object 2&quot;}, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;anotherTestObj2&quot;: false, &quot;anotherTestObj3&quot;: null, &quot;testObj21&quot;: &quot;contents of test object 2&quot;}, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: &quot;test string for meta data&quot;, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: &quot;test string for meta data&quot;, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: 45, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: 45, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: true, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: true, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: [&quot;daisy duck&quot;, &quot;goofy&quot;, 52, true], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: [&quot;daisy duck&quot;, &quot;goofy&quot;, 52, true], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: null, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: null, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: undefined, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: undefined, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;testObj2&quot;: &quot;contents of test object 2&quot;}, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;testObj2&quot;: &quot;contents of test object 2&quot;}, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;anotherTestObj2&quot;: false, &quot;anotherTestObj3&quot;: null, &quot;testObj21&quot;: &quot;contents of test object 2&quot;}, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;anotherTestObj2&quot;: false, &quot;anotherTestObj3&quot;: null, &quot;testObj21&quot;: &quot;contents of test object 2&quot;}, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: &quot;test string for meta data&quot;, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: &quot;test string for meta data&quot;, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: 45, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: 45, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: true, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: true, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: [&quot;daisy duck&quot;, &quot;goofy&quot;, 52, true], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: [&quot;daisy duck&quot;, &quot;goofy&quot;, 52, true], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: null, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: null, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: undefined, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: undefined, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;testObj2&quot;: &quot;contents of test object 2&quot;}, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;testObj2&quot;: &quot;contents of test object 2&quot;}, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;anotherTestObj2&quot;: false, &quot;anotherTestObj3&quot;: null, &quot;testObj21&quot;: &quot;contents of test object 2&quot;}, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;anotherTestObj2&quot;: false, &quot;anotherTestObj3&quot;: null, &quot;testObj21&quot;: &quot;contents of test object 2&quot;}, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: &quot;test string for meta data&quot;, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: &quot;test string for meta data&quot;, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: 45, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: 45, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: [&quot;daisy duck&quot;, &quot;goofy&quot;, 52, true], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: [&quot;daisy duck&quot;, &quot;goofy&quot;, 52, true], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;testObj2&quot;: &quot;contents of test object 2&quot;}, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;testObj2&quot;: &quot;contents of test object 2&quot;}, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;anotherTestObj2&quot;: false, &quot;anotherTestObj3&quot;: null, &quot;testObj21&quot;: &quot;contents of test object 2&quot;}, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;anotherTestObj2&quot;: false, &quot;anotherTestObj3&quot;: null, &quot;testObj21&quot;: &quot;contents of test object 2&quot;}, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: &quot;test string for meta data&quot;, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: &quot;test string for meta data&quot;, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: 45, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: 45, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: [&quot;daisy duck&quot;, &quot;goofy&quot;, 52, true], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: [&quot;daisy duck&quot;, &quot;goofy&quot;, 52, true], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.011">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;testObj2&quot;: &quot;contents of test object 2&quot;}, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;testObj2&quot;: &quot;contents of test object 2&quot;}, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;anotherTestObj2&quot;: false, &quot;anotherTestObj3&quot;: null, &quot;testObj21&quot;: &quot;contents of test object 2&quot;}, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should not get called since &quot;viewProps&quot; does not contain all valid keys in correct format. Run handleNavigation({ metaData: {&quot;anotherTestObj2&quot;: false, &quot;anotherTestObj3&quot;: null, &quot;testObj21&quot;: &quot;contents of test object 2&quot;}, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called, because &quot;viewProps&quot; does not contain all valid keys (valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number))" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: test string for view data, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: test string for view data, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.006">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: test string for view data, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: test string for view data, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: test string for view data, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: test string for view data, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: test string for view data, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: test string for view data, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: test string for view data, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: test string for view data, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: test string for view data, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: test string for view data, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.008">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: test string for view data, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: test string for view data, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: 30, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: 30, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.006">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: 30, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: 30, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: 30, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: 30, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: 30, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: 30, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: 30, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: 30, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: 30, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: 30, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: 30, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: 30, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: true, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: true, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: true, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: true, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: true, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: true, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: true, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: true, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: true, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: true, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: true, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: true, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: true, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: true, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: tiger,winnie,5,false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: tiger,winnie,5,false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: tiger,winnie,5,false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: tiger,winnie,5,false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: tiger,winnie,5,false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: tiger,winnie,5,false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: tiger,winnie,5,false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: tiger,winnie,5,false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: tiger,winnie,5,false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: tiger,winnie,5,false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: tiger,winnie,5,false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: tiger,winnie,5,false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: tiger,winnie,5,false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: tiger,winnie,5,false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: null, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: null, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: null, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: null, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: null, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: null, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.008">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: null, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: null, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: null, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: null, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: null, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: null, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: null, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: null, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: undefined, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: undefined, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.009">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: undefined, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: undefined, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: undefined, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: undefined, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.007">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: undefined, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: undefined, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: undefined, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: undefined, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.006">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: undefined, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: undefined, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: undefined, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: undefined, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.011">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.01">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.009">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.006">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.009">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.007">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.011">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.007">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: test string for meta data, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: test string for view data, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: test string for view data, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: test string for view data, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: test string for view data, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: test string for view data, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: test string for view data, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: test string for view data, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: test string for view data, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: test string for view data, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: test string for view data, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: test string for view data, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: test string for view data, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.009">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: test string for view data, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: test string for view data, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.007">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: 30, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: 30, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: 30, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: 30, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: 30, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: 30, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: 30, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: 30, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.008">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: 30, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: 30, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: 30, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: 30, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: 30, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: 30, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.007">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: true, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: true, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.006">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: true, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: true, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: true, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: true, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: true, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: true, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: true, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: true, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: true, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: true, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: true, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: true, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.008">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: tiger,winnie,5,false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: tiger,winnie,5,false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.006">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: tiger,winnie,5,false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: tiger,winnie,5,false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: tiger,winnie,5,false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: tiger,winnie,5,false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: tiger,winnie,5,false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: tiger,winnie,5,false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: tiger,winnie,5,false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: tiger,winnie,5,false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: tiger,winnie,5,false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: tiger,winnie,5,false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: tiger,winnie,5,false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: tiger,winnie,5,false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: null, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: null, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: null, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: null, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: null, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: null, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: null, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: null, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: null, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: null, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: null, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: null, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.006">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: null, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: null, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.008">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: undefined, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: undefined, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: undefined, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: undefined, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: undefined, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: undefined, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: undefined, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: undefined, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: undefined, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: undefined, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: undefined, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: undefined, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: undefined, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: undefined, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: 45, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: test string for view data, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: test string for view data, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: test string for view data, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: test string for view data, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: test string for view data, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: test string for view data, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: test string for view data, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: test string for view data, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: test string for view data, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: test string for view data, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: test string for view data, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: test string for view data, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: test string for view data, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: test string for view data, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: 30, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: 30, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: 30, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: 30, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: 30, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: 30, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: 30, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: 30, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: 30, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: 30, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: 30, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: 30, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: 30, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: 30, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: true, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: true, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: true, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: true, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: true, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: true, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: true, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: true, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: true, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: true, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: true, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: true, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: true, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: true, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: tiger,winnie,5,false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: tiger,winnie,5,false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: tiger,winnie,5,false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: tiger,winnie,5,false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: tiger,winnie,5,false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: tiger,winnie,5,false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: tiger,winnie,5,false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: tiger,winnie,5,false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: tiger,winnie,5,false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: tiger,winnie,5,false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: tiger,winnie,5,false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: tiger,winnie,5,false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.012">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: tiger,winnie,5,false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: tiger,winnie,5,false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: null, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: null, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: null, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: null, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: null, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: null, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: null, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: null, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: null, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: null, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: null, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: null, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: null, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: null, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: undefined, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: undefined, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: undefined, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: undefined, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: undefined, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: undefined, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: undefined, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: undefined, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: undefined, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: undefined, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: undefined, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: undefined, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: undefined, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: undefined, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.009">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: true, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.008">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: test string for view data, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: test string for view data, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: test string for view data, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: test string for view data, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: test string for view data, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: test string for view data, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: test string for view data, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: test string for view data, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: test string for view data, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: test string for view data, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: test string for view data, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: test string for view data, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: test string for view data, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: test string for view data, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: 30, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: 30, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: 30, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: 30, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: 30, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: 30, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: 30, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: 30, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: 30, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: 30, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: 30, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: 30, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: 30, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: 30, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: true, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: true, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: true, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: true, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: true, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: true, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: true, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: true, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: true, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: true, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: true, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: true, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: true, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: true, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.006">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.01">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.006">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: tiger,winnie,5,false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: tiger,winnie,5,false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: tiger,winnie,5,false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: tiger,winnie,5,false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: tiger,winnie,5,false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: tiger,winnie,5,false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: tiger,winnie,5,false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: tiger,winnie,5,false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: tiger,winnie,5,false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: tiger,winnie,5,false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: tiger,winnie,5,false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: tiger,winnie,5,false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: tiger,winnie,5,false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: tiger,winnie,5,false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: null, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: null, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: null, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: null, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: null, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: null, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: null, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: null, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: null, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: null, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: null, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: null, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: null, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: null, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: undefined, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: undefined, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: undefined, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: undefined, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: undefined, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: undefined, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: undefined, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: undefined, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: undefined, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: undefined, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: undefined, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: undefined, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: undefined, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: undefined, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: false, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: test string for view data, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: test string for view data, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: test string for view data, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: test string for view data, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: test string for view data, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: test string for view data, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: test string for view data, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: test string for view data, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: test string for view data, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: test string for view data, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: test string for view data, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: test string for view data, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: test string for view data, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: test string for view data, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: 30, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: 30, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: 30, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: 30, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: 30, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: 30, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: 30, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: 30, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: 30, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: 30, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: 30, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: 30, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: 30, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: 30, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: true, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: true, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.012">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: true, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: true, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: true, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: true, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: true, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: true, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: true, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: true, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: true, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: true, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: true, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: true, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.007">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.006">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: tiger,winnie,5,false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: tiger,winnie,5,false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: tiger,winnie,5,false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: tiger,winnie,5,false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: tiger,winnie,5,false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: tiger,winnie,5,false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: tiger,winnie,5,false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: tiger,winnie,5,false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: tiger,winnie,5,false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: tiger,winnie,5,false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: tiger,winnie,5,false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: tiger,winnie,5,false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: tiger,winnie,5,false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: tiger,winnie,5,false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: null, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: null, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: null, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: null, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: null, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: null, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: null, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: null, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: null, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: null, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: null, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: null, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: null, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: null, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: undefined, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: undefined, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: undefined, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: undefined, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.006">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: undefined, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: undefined, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: undefined, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: undefined, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: undefined, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: undefined, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: undefined, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: undefined, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: undefined, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: undefined, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.009">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.007">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: daisy duck,goofy,52,true, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.009">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: test string for view data, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: test string for view data, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: test string for view data, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: test string for view data, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: test string for view data, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: test string for view data, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: test string for view data, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: test string for view data, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: test string for view data, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: test string for view data, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: test string for view data, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: test string for view data, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: test string for view data, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: test string for view data, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.012">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: 30, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: 30, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: 30, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: 30, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: 30, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: 30, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: 30, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: 30, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: 30, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: 30, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: 30, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: 30, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: 30, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: 30, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: true, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: true, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: true, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: true, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: true, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: true, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: true, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: true, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: true, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: true, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: true, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: true, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: true, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: true, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.009">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.008">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: tiger,winnie,5,false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: tiger,winnie,5,false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: tiger,winnie,5,false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: tiger,winnie,5,false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: tiger,winnie,5,false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: tiger,winnie,5,false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: tiger,winnie,5,false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: tiger,winnie,5,false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: tiger,winnie,5,false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: tiger,winnie,5,false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: tiger,winnie,5,false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: tiger,winnie,5,false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: tiger,winnie,5,false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: tiger,winnie,5,false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: null, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: null, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: null, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: null, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: null, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: null, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: null, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: null, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: null, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: null, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: null, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: null, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: null, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: null, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: undefined, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: undefined, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: undefined, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: undefined, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: undefined, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: undefined, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: undefined, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: undefined, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: undefined, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: undefined, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: undefined, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: undefined, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: undefined, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: undefined, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.011">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: null, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: test string for view data, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: test string for view data, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: test string for view data, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: test string for view data, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: test string for view data, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: test string for view data, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: test string for view data, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: test string for view data, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: test string for view data, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: test string for view data, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: test string for view data, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: test string for view data, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: test string for view data, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: test string for view data, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.006">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: 30, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: 30, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: 30, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: 30, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: 30, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: 30, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: 30, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: 30, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: 30, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: 30, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: 30, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: 30, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: 30, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: 30, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: true, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: true, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: true, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: true, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: true, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: true, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: true, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: true, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: true, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: true, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: true, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: true, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: true, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: true, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: tiger,winnie,5,false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: tiger,winnie,5,false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: tiger,winnie,5,false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: tiger,winnie,5,false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: tiger,winnie,5,false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: tiger,winnie,5,false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: tiger,winnie,5,false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: tiger,winnie,5,false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: tiger,winnie,5,false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: tiger,winnie,5,false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: tiger,winnie,5,false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: tiger,winnie,5,false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: tiger,winnie,5,false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: tiger,winnie,5,false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: null, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: null, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: null, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: null, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: null, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: null, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: null, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: null, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: null, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: null, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: null, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: null, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: null, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: null, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.006">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: undefined, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: undefined, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: undefined, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: undefined, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: undefined, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: undefined, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: undefined, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: undefined, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: undefined, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: undefined, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: undefined, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: undefined, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: undefined, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: undefined, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.007">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: undefined, viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.006">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.006">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.009">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: test string for view data, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: 30, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.009">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: true, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: tiger,winnie,5,false, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.011">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: null, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: 14 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.005">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: undefined, refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.004">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: test string for refreshFactor }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: true }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: false }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: darkwing duck,simba,false,247 }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: null }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: undefined }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({ metaData: [object Object], viewData: [object Object], refreshFactor: [object Object] }): ExceptionsHandler.ValidatorError(&quot;app-103&quot;) should be called. There are correct keys in the &quot;viewProps&quot; object, but one or more of their values are in wrong format" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({&quot;metaData&quot;: [Object], &quot;refreshFactor&quot;: 21, &quot;viewData&quot;: [Object]}): this.updateState() should be called, because &quot;viewProps&quot; contains &quot;viewData&quot; (non-array object), &quot;metaData&quot; (non-array object) and &quot;refreshFactor&quot; (number)" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({&quot;metaData&quot;: [Object], &quot;refreshFactor&quot;: 21, &quot;viewData&quot;: [Object]}): this.updateState() should be called, because &quot;viewProps&quot; contains &quot;viewData&quot; (non-array object), &quot;metaData&quot; (non-array object) and &quot;refreshFactor&quot; (number)" time="0.003">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({&quot;metaData&quot;: [Object], &quot;refreshFactor&quot;: 17, &quot;viewData&quot;: [Object]}): this.updateState() should be called, because &quot;viewProps&quot; contains &quot;viewData&quot; (non-array object), &quot;metaData&quot; (non-array object) and &quot;refreshFactor&quot; (number)" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({&quot;metaData&quot;: [Object], &quot;refreshFactor&quot;: 17, &quot;viewData&quot;: [Object]}): this.updateState() should be called, because &quot;viewProps&quot; contains &quot;viewData&quot; (non-array object), &quot;metaData&quot; (non-array object) and &quot;refreshFactor&quot; (number)" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({&quot;metaData&quot;: [Object], &quot;refreshFactor&quot;: 85, &quot;viewData&quot;: [Object]}): this.updateState() should be called, because &quot;viewProps&quot; contains &quot;viewData&quot; (non-array object), &quot;metaData&quot; (non-array object) and &quot;refreshFactor&quot; (number)" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({&quot;metaData&quot;: [Object], &quot;refreshFactor&quot;: 85, &quot;viewData&quot;: [Object]}): this.updateState() should be called, because &quot;viewProps&quot; contains &quot;viewData&quot; (non-array object), &quot;metaData&quot; (non-array object) and &quot;refreshFactor&quot; (number)" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({&quot;metaData&quot;: [Object], &quot;refreshFactor&quot;: 61, &quot;viewData&quot;: [Object]}): this.updateState() should be called, because &quot;viewProps&quot; contains &quot;viewData&quot; (non-array object), &quot;metaData&quot; (non-array object) and &quot;refreshFactor&quot; (number)" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({&quot;metaData&quot;: [Object], &quot;refreshFactor&quot;: 61, &quot;viewData&quot;: [Object]}): this.updateState() should be called, because &quot;viewProps&quot; contains &quot;viewData&quot; (non-array object), &quot;metaData&quot; (non-array object) and &quot;refreshFactor&quot; (number)" time="0.001">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({&quot;metaData&quot;: [Object], &quot;refreshFactor&quot;: 18, &quot;viewData&quot;: [Object]}): this.updateState() should be called, because &quot;viewProps&quot; contains &quot;viewData&quot; (non-array object), &quot;metaData&quot; (non-array object) and &quot;refreshFactor&quot; (number)" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({&quot;metaData&quot;: [Object], &quot;refreshFactor&quot;: 18, &quot;viewData&quot;: [Object]}): this.updateState() should be called, because &quot;viewProps&quot; contains &quot;viewData&quot; (non-array object), &quot;metaData&quot; (non-array object) and &quot;refreshFactor&quot; (number)" time="0.001">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({&quot;metaData&quot;: [Object], &quot;randomKey1&quot;: [Object], &quot;randomKey2&quot;: [Function randomKey2], &quot;randomKey3&quot;: [Array], &quot;randomKey4&quot;: false, &quot;refreshFactor&quot;: 28, &quot;viewData&quot;: [Object]}): this.updateState() should be called, because &quot;viewProps&quot; contains &quot;viewData&quot; (non-array object), &quot;metaData&quot; (non-array object) and &quot;refreshFactor&quot; (number)" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({&quot;metaData&quot;: [Object], &quot;randomKey1&quot;: [Object], &quot;randomKey2&quot;: [Function randomKey2], &quot;randomKey3&quot;: [Array], &quot;randomKey4&quot;: false, &quot;refreshFactor&quot;: 28, &quot;viewData&quot;: [Object]}): this.updateState() should be called, because &quot;viewProps&quot; contains &quot;viewData&quot; (non-array object), &quot;metaData&quot; (non-array object) and &quot;refreshFactor&quot; (number)" time="0.002">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({&quot;metaData&quot;: [Object], &quot;randomKey1&quot;: null, &quot;randomKey2&quot;: true, &quot;randomKey3&quot;: [Array], &quot;randomKey4&quot;: [Function randomKey4], &quot;refreshFactor&quot;: 42, &quot;viewData&quot;: [Object]}): this.updateState() should be called, because &quot;viewProps&quot; contains &quot;viewData&quot; (non-array object), &quot;metaData&quot; (non-array object) and &quot;refreshFactor&quot; (number)" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({&quot;metaData&quot;: [Object], &quot;randomKey1&quot;: null, &quot;randomKey2&quot;: true, &quot;randomKey3&quot;: [Array], &quot;randomKey4&quot;: [Function randomKey4], &quot;refreshFactor&quot;: 42, &quot;viewData&quot;: [Object]}): this.updateState() should be called, because &quot;viewProps&quot; contains &quot;viewData&quot; (non-array object), &quot;metaData&quot; (non-array object) and &quot;refreshFactor&quot; (number)" time="0.001">
    </testcase>
    <testcase classname="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({&quot;metaData&quot;: [Object], &quot;randomKey1&quot;: false, &quot;randomKey2&quot;: [Array], &quot;randomKey3&quot;: 248, &quot;randomKey4&quot;: [Array], &quot;refreshFactor&quot;: 94, &quot;viewData&quot;: [Object]}): this.updateState() should be called, because &quot;viewProps&quot; contains &quot;viewData&quot; (non-array object), &quot;metaData&quot; (non-array object) and &quot;refreshFactor&quot; (number)" name="&lt;App /&gt;: Unit test of individual methods located in this component Test handleNavigation(viewProps) Test this method using various non-array objects as &quot;viewProps&quot;. The objects should vary to cover as many permutations as possible. this.updateState() should get called only if the &quot;viewProps&quot; object contains all valid keys (all valid keys being &quot;viewData&quot; (object), &quot;metaData&quot; (object) and &quot;refreshFactor&quot; (number)). Otherwise, throw ExceptionsHandler.ValidatorError(&quot;app-103&quot;). Test various combinations of &quot;metaData&quot;, &quot;viewData&quot; and &quot;refreshFactor&quot; provided by &quot;viewProps&quot;. this.updateState() should get called only if &quot;metaData&quot; and &quot;viewData&quot; are non-array objects AND refreshFactor is a number Run handleNavigation({&quot;metaData&quot;: [Object], &quot;randomKey1&quot;: false, &quot;randomKey2&quot;: [Array], &quot;randomKey3&quot;: 248, &quot;randomKey4&quot;: [Array], &quot;refreshFactor&quot;: 94, &quot;viewData&quot;: [Object]}): this.updateState() should be called, because &quot;viewProps&quot; contains &quot;viewData&quot; (non-array object), &quot;metaData&quot; (non-array object) and &quot;refreshFactor&quot; (number)" time="0.002">
    </testcase>
  </testsuite>
</testsuites>