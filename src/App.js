import React, { Fragment, Component } from 'react';


/* Import Modals */

import CalendarDateSettingsModal from "./components/modals/calendarDateSettingsModal";
import ConfirmationModal from "./components/modals/confirmationModal";

/* Import Routes */
import RouteList from './components/routes/routeList';

/* Import Sidebars */
import MainSidebar from './components/sidebars/mainSidebar/mainSidebar';

/* Import Utilities */
import FullWidthLoadbar from './components/utils/fullWidthLoadbar';

/* Import Footer */
import ViewFooter from './components/views/components/viewFooter';



/* Import CSS generated by create-react-app */
import './styles/react-generated/App.css';

/* Import Tabeon app specific CSS */
import './styles/tabeon/style.css';
import { ReactDOM } from 'react-dom';



class App extends Component{
  state = {
    currentView: {},
    routes: [],
    modal: {},
    mainSidebar: {},
    refreshFactor: 0
  };

 
  updateState = (newProps, showLoadbar, callback) => {
    /* 
      Used to update the App state itself. This function works the same way as this.setState(), 
      but also increases the refreshFactor (the FullWidthLoadbar uses this to determine whether to launch the loadbar
        or not)
    */
    let newState = {
      ...newProps
    }

    if(showLoadbar && showLoadbar === true){
      let { refreshFactor } = this.state;
      refreshFactor++;

      newState.refreshFactor = refreshFactor;
    }

    this.setState(newState, callback);
  }
  
  handleNavigation = (viewProps) => {

    this.updateState(
      {
        currentView: viewProps
      },
      true
    )
  }

  handleMainSidebarClick = (sidebarProps) => {
    this.updateState(
      {
        mainSidebar: sidebarProps,
      
      },
      false
    )
  }

  modalHandler = (data) => {
    console.log("BATMAN", data);
    if(data.clear && data.clear === true){
      this.clearModal();
    } else {
      this.launchModal(data);
    }
  }

  launchModal = (data) => {
    const modal = {
      launched: true,
      ...data
    }

    this.setState({
      modal
    });
  }

  clearModal = () => {
    const modal = {};

    setTimeout(() => {
      this.setState({ modal }); 
    }, 500)
    
  }
  
  handleRouteListReady = (data) => {
    const routes = data;

    this.setState({ routes });
  }
  

  render = () => {
    const { launched: modalLaunched, id: modalId } = this.state.modal;
    
    return (
      <Fragment>
       
        <div className="container-fluid">
          {(modalLaunched && modalId === "confirm-action") && <ConfirmationModal data={this.state.modal} onSave={() => ""} onDismiss={() => this.clearModal()}></ConfirmationModal>}
          {(modalLaunched && modalId === "date-settings") && <CalendarDateSettingsModal data={this.state.modal} onSave={() => ""} onDismiss={() => this.clearModal()}></CalendarDateSettingsModal>}
          <div className="row">
            <MainSidebar routes={this.state.routes} onMainSidebarClick={(data) => this.handleMainSidebarClick(data)} />
            <div className="col-10 py-2" id="tabeon-view-container">
                <RouteList onRaisedRoutesInfo={(data) => this.handleRouteListReady(data)} onRaiseToModal={(data) => this.modalHandler(data)} onNavigation={(data) => this.handleNavigation(data)} />
                <ViewFooter />
            </div>
          </div>
          
        </div>
        <FullWidthLoadbar refreshFactor={this.state.refreshFactor} />
      </Fragment>
    );
  }

}

export default App;
