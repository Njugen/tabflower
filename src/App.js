import React, { Fragment, Component } from "react";

/* Import Error Boundary */

import ErrorBoundary from "./components/utils/errorBoundary";

/* Import Modals */

import CalendarDateSettingsModal from "./components/modals/calendarModule/calendarDateSettingsModal";
import ConfirmationModal from "./components/modals/calendarModule/confirmationModal";

import ETGMLaunchGroupModal from "./components/modals/existingTabGroupsModule/etgmLaunchGroupModal";
import ETGMRemoveGroupModal from "./components/modals/existingTabGroupsModule/etgmRemoveGroupModal";
import ETGMCreateOrEditGroupModal from "./components/modals/existingTabGroupsModule/etgmCreateOrEditGroupModal";

import COTMRemoveUnresponsiveTabsModal from "./components/modals/currentlyOpenedTabsModule/cotmRemoveUnresponsiveTabsModal";
import COTMRemoveWindowModal from "./components/modals/currentlyOpenedTabsModule/cotmRemoveWindowModal";
import COTMRemoveTabModal from "./components/modals/currentlyOpenedTabsModule/cotmRemoveTabModal";

import ErrorOverlay from "./components/modals/errorOverlay";

/* Import Routes */
import RouteList from "./components/routes/routeList";

/* Import Sidebars */
import MainNavBar from "./components/sidebars/mainNavBar/mainNavBar";

/* Import Utilities */
import FullWidthLoadbar from "./components/utils/fullWidthLoadbar";

/* Import Footer */
import ViewFooter from "./components/views/components/viewFooter";

/* Import CSS generated by create-react-app */
import "./styles/react-generated/App.css";

/* Import Tabeon app specific CSS */
import "./styles/tabeon/style.css";

/* Import Tabeon */
import * as validator from "./components/utils/inputValidators";

import * as ExceptionsHandler from "./components/utils/exceptionsAndHandler";
import AppContext from "./components/contexts/AppContextProvider";

class App extends Component {
  static contextType = AppContext;

  state = {
    // NOT NEEDED ANYMORE currentView: {},
    // routes: [],
    // modal: {},
    // errors: [],
    MainNavBar: {},
    //refreshFactor: 0,
  };

  updateState = (newProps, showLoadbar, callback) => {
    /* 
      Used to update the App state itself. This function works the same way as this.setState(), 
      but also increases the refreshFactor (the FullWidthLoadbar uses this to determine whether to launch the loadbar
        or not)
    */
    const { isObject, isFunction, isUndefined } = validator;
    const { getValueFromState, setValueToState } = this.context;

    try {
      if (isObject(newProps)) {
        let newState = {
          ...newProps,
        };

        if (showLoadbar && showLoadbar === true) {
          let refreshFactor = getValueFromState("refreshFactor");
          refreshFactor++;

          setValueToState("refreshFactor", refreshFactor);
        }

        if (isFunction(callback)) {
          this.setState(newState, callback);
        } else if (isUndefined(callback)) {
          this.setState(newState);
        } else {
          throw ExceptionsHandler.ValidatorError("app-101");
        }
      } else {
        throw ExceptionsHandler.ValidatorError("app-102");
      }
    } catch (err) {
      this.launchErrorOverlay(err);
    }
  };

  handleMainNavBarClick = (data) => {
    const { isObject, isNumber } = validator;

    try {
      if (isObject(data)) {
        if (isNumber(data.activeNavLinkKey)) {
          this.updateState(
            {
              MainNavBar: data,
            },
            true
          );
        } else {
          throw ExceptionsHandler.ValidatorError("app-106");
        }
      } else {
        throw ExceptionsHandler.ValidatorError("app-105");
      }
    } catch (err) {
      this.launchErrorOverlay(err);
    }
  };

  launchErrorOverlay = (data) => {
    const { isObject, isString } = validator;
    const { setValueToState, getValueFromState } = this.context;

    try {
      if (isObject(data)) {
        if (
          isString(data.code) &&
          isString(data.message) &&
          isString(data.name)
        ) {
          let errors = getValueFromState("errors");
          errors.push(data);

          setValueToState("errors", errors);
        } else {
          throw ExceptionsHandler.ValidatorError("app-110");
        }
      } else {
        throw ExceptionsHandler.ValidatorError("app-109");
      }
    } catch (err) {
      this.setState({
        errors: [data, err],
      });
    }
  };

  handleErrorOverlayDismiss = () => {
    const { setValueToState } = this.context;
    const errors = [];

    setValueToState("errors", errors);
  };

  render = () => {
    // Get context
    const { getValueFromState } = this.context;

    const modalData = getValueFromState("modal");
    const errors = getValueFromState("errors");
    const routes = getValueFromState("routes");

    const { id: modalId } = modalData;

    console.log("REE", errors.length);
    return (
      <Fragment>
        <ErrorBoundary>
          {modalId === "confirm-action" && (
            <ConfirmationModal
              data={modalData}
              onRaiseToErrorOverlay={(data) => this.launchErrorOverlay(data)}
              // onDismiss={() => this.clearModal()}
            ></ConfirmationModal>
          )}
          {modalId === "date-settings" && (
            <CalendarDateSettingsModal
              data={modalData}
              onRaiseToErrorOverlay={(data) => this.launchErrorOverlay(data)}
              // onDismiss={() => this.clearModal()}
            ></CalendarDateSettingsModal>
          )}
          {modalId === "etgmlaunchgroupmodal" && (
            <ETGMLaunchGroupModal
              data={modalData}
              onRaiseToErrorOverlay={(data) => this.launchErrorOverlay(data)}
              //  onDismiss={() => this.clearModal()}
            ></ETGMLaunchGroupModal>
          )}
          {modalId === "etgmremovegroupmodal" && (
            <ETGMRemoveGroupModal
              data={modalData}
              onRaiseToErrorOverlay={(data) => this.launchErrorOverlay(data)}
              // onDismiss={() => this.clearModal()}
            ></ETGMRemoveGroupModal>
          )}
          {modalId === "etgmcreateoreditgroupmodal" && (
            <ETGMCreateOrEditGroupModal
              data={modalData}
              onRaiseToErrorOverlay={(data) => this.launchErrorOverlay(data)}
              // onDismiss={() => this.clearModal()}
            ></ETGMCreateOrEditGroupModal>
          )}
          {modalId === "cotmremoveunresponsivetabsmodal" && (
            <COTMRemoveUnresponsiveTabsModal
              data={modalData}
              onRaiseToErrorOverlay={(data) => this.launchErrorOverlay(data)}
              // onDismiss={() => this.clearModal()}
            ></COTMRemoveUnresponsiveTabsModal>
          )}
          {modalId === "cotmremovewindowmodal" && (
            <COTMRemoveWindowModal
              data={modalData}
              onRaiseToErrorOverlay={(data) => this.launchErrorOverlay(data)}
              // onDismiss={() => this.clearModal()}
            ></COTMRemoveWindowModal>
          )}
          {modalId === "cotmremovetabmodal" && (
            <COTMRemoveTabModal
              data={modalData}
              onRaiseToErrorOverlay={(data) => this.launchErrorOverlay(data)}
              // onDismiss={() => this.clearModal()}
            ></COTMRemoveTabModal>
          )}
          {errors.length > 0 && (
            <ErrorOverlay
              data={errors}
              onSave={() => ""}
              onDismiss={() => this.handleErrorOverlayDismiss()}
            ></ErrorOverlay>
          )}

          <div className="container-fluid">
            <MainNavBar
              routes={routes}
              onMainNavBarClick={(data) => this.handleMainNavBarClick(data)}
            />
            <div className="row">
              <div className="col-md-12 py-2" id="tabeon-view-container">
                <RouteList
                  /* onRaisedRoutesInfo={(data) =>
                    this.handleRaisedRoutesInfo(data)
                  } */
                  //onRaiseToModal={(data) => this.launchModal(data)}
                  //  onNavigation={(data) => this.handleNavigation(data)}
                  onRaiseToErrorOverlay={(data) =>
                    this.launchErrorOverlay(data)
                  }
                />
                <ViewFooter />
              </div>
            </div>
          </div>
          <FullWidthLoadbar
            refreshFactor={getValueFromState("refreshFactor")}
          />
        </ErrorBoundary>
      </Fragment>
    );
  };
}

export default App;
